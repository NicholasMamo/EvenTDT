"""
The :class:`~Compound` class is an extension of the :class:`~vsm.vector.Vector`.
The class represents a group of vectors, not unlike a :class:`~vsm.clustering.cluster.Cluster`.
Differently from a :class:`~vsm.clustering.cluster.Cluster`, however, the :class:`~vsm.compound.Compound` class does not store all the documents.
Instead, it only stores the accumulation of the documents and the number of documents inside of it.

The class is used by applications that do not need a comprehensive list of vectors.
If a single
"""

import os
import sys

path = os.path.join(os.path.dirname(__file__), '..')
if path not in sys.path:
    sys.path.append(path)

from vsm.vector import Vector
from vsm import vector_math
from logger import logger

class Compound(Vector):
    """
    The :class:`~Compound` class is a special type of :class:`~vsm.vector.Vector` that represents several vectors.
    The class only stores a representation of the vectors, adding each vector's dimensions to form one single vector.

    :var size: The numebr of vectors represented by the :class:`~Compound` vector.
    :vartype size: int
    """

    def __init__(self, vectors=None, *args, **kwargs):
        """
        Initialize the :class:`~Compound`.

        :param vectors: The list of vectors to add to the :class:`~Compound`.
                        If no vector is given, the :class:`~Compound` is initialized empty.
        :type vectors: list of :class:`~vsm.vector.Vector` or None
        """

        super(Compound, self).__init__(*args, **kwargs)
        self.size = 0
        vectors = vectors or [ ]
        self.add(*vectors)

    def add(self, *args):
        """
        Add the given :class:`~vsm.vector.Vector` arguments to the :class:`~Compound`.
        """

        self.size += len(args)
        for vector in args:
            for dimension, magnitude in vector.dimensions.items():
                self.dimensions[dimension] = self.dimensions.get(dimension, 0) + magnitude

    def remove(self, *args):
        """
        Remove the given :class:`~vsm.vector.Vector` arguments from the :class:`~Compound`.
        """

        if len(args) > self.size:
            logger.warning("Removing more vectors from `Compound` than exist")

        self.size -= len(args)
        for vector in args:
            for dimension, magnitude in vector.dimensions.items():
                self.dimensions[dimension] = self.dimensions.get(dimension, 0) - magnitude

    def centroid(self):
        """
        Calculate the centroid of the :class:`~Compound`.

        :return: A new, normalized :class:`~vsm.vector.Vector` representing the centroid of all vectors in the :class:`~Compound`.
        :rtype: :class:`~vsm.vector.Vector`
        """

        if not self.size:
            return Vector()

        _centroid = Vector({ dimension: magnitude / self.size
                             for dimension, magnitude in self.dimensions.items() })
        _centroid.normalize()
        return _centroid

    def to_array(self):
        """
        Export the :class:`~Compound` as ``dict``.
        This ``dict`` has three keys:

            1. The class name, used when re-creating the :class:`~Compound`,
            2. The :class:`~Compound`'s attributes as a ``dict``,
            3. The :class:`~Compound`'s dimensions as a ``dict``, and
            4. The number of :class:`~vsm.vector.Vector` instances in the class.

        :return: The :class:`~Compound` as a ``dict``.
        :rtype: dict
        """

        array = super(Compound, self).to_array()
        array.update({ 'size': self.size })
        return array

    @staticmethod
    def from_array(array):
        """
        Create an instance of the :class:`~Compound` from the given ``dict``.
        This function expects the array to have been generated by the :func:`~Compound.to_array`, and must have these keys:

            1. The class name,
            2. The :class:`~Compound`'s attributes as a ``dict``,
            3. The :class:`~Compound`'s dimensions as a ``dict``, and
            4. The number of :class:`~vsm.vector.Vector` instances in the class.

        :param array: The ``dict`` with the attributes to create the :class:`~Compound`.
        :type array: dict

        :return: A new instance of the :class:`~Compound` with the same attributes stored in the object.
        :rtype: :class:`~Compound`
        """

        compound = Compound([ ], dimensions=array.get('dimensions'), attributes=array.get('attributes'))
        compound.size = array.get('size')
        return compound
