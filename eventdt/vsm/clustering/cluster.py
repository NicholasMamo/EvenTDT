"""
Clusters are groups of :class:`~vsm.vector.Vector` instances.
Groups are meant to maximize distance between vectors of different subjects.
Simultaneously, they aim to minimize the distance between vectors in the same clusters.

Clusters can be created normally, or they can be generated by a :class:`~vsm.clustering.algorithms.clustering.ClusteringAlgorithm`.
"""

import importlib
import os
import sys

path = os.path.join(os.path.dirname(__file__), '..', '..')
if path not in sys.path:
    sys.path.append(path)

from objects.attributable import Attributable
from objects.exportable import Exportable

from vsm import Vector, vector_math

class Cluster(Attributable, Exportable):
	"""
	The cluster class is a collection of vectors, or documents.
	It also has a centroid.
	Clusters are based on :class:`~objects.Attributable` so that they may have additional properties.

	:ivar vectors: The list of vectors that make up the cluster.
	:vartype vectors: list of :class:`~vsm.vector.Vector`
	:ivar centroid: The centroid of the cluster, representing the average vector.
	:vartype centroid: :class:`~vsm.vector.Vector`
	"""

	def __init__(self, vectors=None, *args, **kwargs):
		"""
		Initialize the cluster with an empty centroid and a list of vectors.

		:param vectors: An initial list of vectors, or a single vector.
						If `None` is given, an empty list is initialized instead.
		:type vectors: list of :class:`~vsm.vector.Vector` or :class:`~vsm.vector.Vector` or `None`
		"""

		super(Cluster, self).__init__(*args, **kwargs)
		self.vectors = vectors

	def add_vectors(self, vectors):
		"""
		Add the given vectors to the cluster.

		:param vectors: The vectors to add to the cluster.
		:type vectors: list
		"""

		for vector in vectors:
			self.add_vector(vector)

	def add_vector(self, vector):
		"""
		Add a vector to the cluster.

		:param vector: The vector to add to the cluster.
		:type vector: :class:`~vsm.vector.Vector`
		"""

		self.vectors.append(vector)
		vectors = len(self.vectors)
		dimensions = vector.dimensions.keys() | self.centroid.dimensions.keys()

		"""
		Update the cluster's centroid incrimentally.
		"""
		for dimension in dimensions:
			new_weight = (self.centroid.dimensions[dimension] * (vectors - 1) + vector.dimensions[dimension]) / vectors
			self.centroid.dimensions[dimension] = new_weight

	def recalculate_centroid(self):
		"""
		Recalculate the centroid.
		This is important if, for example, one of the vector instances change in memory.
		"""

		self.centroid = Vector()
		old_vectors = list(self.vectors) # make a copy of the Vectors
		self.vectors = [] # remove all Vectors
		for vector in old_vectors:
			self.add_vector(vector)

	def remove_vector(self, vector):
		"""
		Remove a vector from the cluster.

		:param vector: The vector to remove from the cluster.
		:type vector: :class:`~vsm.vector.Vector`
		"""

		self.vectors.remove(vector)
		vectors = len(self.vectors)
		copy = vector.dimensions.copy()
		dimensions = list(self.centroid.dimensions.keys())

		"""
		Update the cluster's centroid incrimentally.
		"""
		for dimension in dimensions:
			value = self.centroid.dimensions[dimension]
			new_value = (value * (vectors + 1) - copy.get(dimension, 0)) / max(vectors, 1)
			self.centroid.dimensions[dimension] = new_value

	def similarity(self, vector, similarity_measure=vector_math.cosine):
		"""
		Calculate the similarity between the given vector and this cluster's centroid.

		:param vector: The vector that will be compared with the centroid.
		:type vector: :class:`~vsm.vector.Vector`
		:param similarity_measure: The similarity function to use to compare the likeliness of the vector with the cluster.
		:type similarity_measure: func

		:return: The similarity between the cluster and the vector.
		:rtype: float
		"""

		return similarity_measure(self.centroid, vector)

	@property
	def vectors(self):
		"""
		Get the list of vectors in the cluster.

		:return: The list of vectors in the cluster.
		:rtype: list of :class:`~vsm.vector.Vector`
		"""

		return self.__vectors

	@vectors.setter
	def vectors(self, vectors=None):
		"""
		Reset the list of vectors.

		:param vectors: The new list of vectors, or a single vector.
						If `None` is given, an empty list is initialized instead.
		:type vectors: list of :class:`~vsm.vector.Vector` or :class:`~vsm.vector.Vector` or `None`
		"""

		vectors = list() if vectors is None else vectors
		if type(vectors) is not list:
			vectors = [ vectors ]

		self.centroid = Vector()
		self.__vectors = []
		for vector in vectors:
			self.add_vector(vector)

	def get_representative_vectors(self, vectors=1, similarity_measure=vector_math.cosine):
		"""
		Get the vectors that are closest to the centroid.
		If the number of vectors that is sought is one, only the vector is returned.
		Otherwise, a list of vectors is returned.

		:param vectors: The number of vectors the fetch.
		:type vectors: int
		:param similarity_measure: The similarity function to use to compare the likeliness of the vector with the cluster.
		:type similarity_measure: func

		:return: The representative vectors.
		:rtype: :class:`~vsm.vector.Vector` or list of :class:`~vsm.vector.Vector`
		"""

		"""
		First calculate all the similarities between the centroid and each vector in the cluster.
		Then, rank all vectors by their similarity score.
		"""

		similarities = [ self.similarity(vector, similarity_measure) for vector in self.vectors ] # calculate the similarities
		similarities = zip(self.vectors, similarities) # combine the similarities with the vectors
		similarities = sorted(similarities, key=lambda x:x[1])[::-1] # sort the vectors in descending order of similarity

		"""
		If only one vector is needed, just return the vector, not a list of vectors.
		Otherwise return a list.
		"""
		if vectors == 1:
			return similarities[0][0] if len(similarities) else None
		else:
			similarities = similarities[:vectors]
			return [ similarity[0] for similarity in similarities ]

	def get_intra_similarity(self, similarity_measure=vector_math.cosine):
		"""
		Get the average similarity between vectors and the cluster.

		:param similarity_measure: The similarity function to use to compare the likeliness of the vector with the cluster.
		:type similarity_measure: func

		:return: The average intra-similarity of the cluster.
		:rtype: float
		"""

		if self.vectors:
			similarities = [ self.similarity(vector, similarity_measure) for vector in self.vectors ] # calculate the similarities
			return sum(similarities)/len(similarities)

		return 0

	def size(self):
		"""
		Get the number of vectors in the cluster.

		:return: The number of vectors in the cluster.
		:rtype: int
		"""

		return len(self.vectors)

	def to_array(self):
		"""
		Export the cluster as an associative array.
		The centroid is not included as it is calculated upon instantiation.

		:return: The cluster as an associative array.
		:rtype: dict
		"""

		return {
			'attributes': self.attributes,
			'vectors': [ vector.to_array() for vector in self.vectors ]
		}

	@staticmethod
	def from_array(array):
		"""
		Create an instance of the cluster from the given associative array.

		:param array: The associative array with the attributes to create the cluster.
		:type array: dict

		:return: A new instance of an object with the same attributes stored in the object.
		:rtype: :class:`~vector.cluster.cluster.Cluster`
		"""

		vectors = [ ]
		for vector in array.get('vectors'):
			module = importlib.import_module(Exportable.get_module(vector.get('class')))
			cls = getattr(module, Exportable.get_class(vector.get('class')))
			vectors.append(cls.from_array(vector))

		return Cluster(vectors=vectors, attributes=array.get('attributes'))
