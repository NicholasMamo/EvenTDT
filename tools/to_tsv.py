#!/usr/bin/env python3

"""
The full list of accepted arguments:

    - ``-f --file``             *<Required>* The original corpus collected by the :mod:`~tools.collect` tool, or an archive of files, or a timeline generated by the :mod:`~tools.consume` tool.
    - ``-o --output``           *<Required>* The file or directory where to save the shareable corpus.
"""

import argparse
import csv
from datetime import datetime
import json
import os
import sys

file_path = os.path.dirname(os.path.abspath(__file__))
root = os.path.join(file_path, '..')
lib = os.path.join(root, 'eventdt')
sys.path.insert(-1, root)
sys.path.insert(-1, lib)

import tools
import twitter

def setup_args():
    """
    Set up and get the list of command-line arguments.

    Accepted arguments:

        - ``-f --file``             *<Required>* The original corpus collected by the :mod:`~tools.collect` tool, or an archive of files, or a timeline generated by the :mod:`~tools.consume` tool.
        - ``-o --output``           *<Required>* The file or directory where to save the shareable corpus.
        - ``--meta``                *<Optional>* The file where to save the meta data.

    :return: The command-line arguments.
    :rtype: :class:`argparse.Namespace`
    """

    parser = argparse.ArgumentParser(description="Make a dataset shareable.")

    parser.add_argument('-f', '--file', type=str, required=True,
                        help='<Required> The original corpus collected by the `collect` tool, or an archive of files, or a timeline generated by the `consume` tool.')
    parser.add_argument('-o', '--output', type=str, required=True,
                        help='<Required> The file or directory where to save the shareable corpus.')

    args = parser.parse_args()
    return args

def main():
    """
    Main program loop.
    """

    # set up the arguments and prepare the data directory.
    args = setup_args()
    cmd = tools.meta(args)
    pcmd = tools.meta(args)

    tools.save(args.output, { }) # to create the directory if it doesn't exist
    write(args.file, args.output)

def write(file, output):
    """
    Make the given file shareable, writing the tweet IDs into the given output file.

    :param file: The path to the original corpus of tweets.
    :type file: str
    :param output: The path where to write the tweet IDs.
    :type output: str
    """

    with open(file, 'r') as infile, \
         open(output, 'w') as outfile:
        writer = csv.writer(outfile, delimiter='\t')
        writer.writerow([ 'id', 'timestamp', 'text' ])
        for line in infile:
            tweet = json.loads(line)
            id = twitter.id(tweet)
            text = twitter.full_text(tweet)
            timestamp = twitter.timestamp(tweet)
            date = datetime.fromtimestamp(timestamp).strftime("%Y-%m-%d %H:%M:%S")
            writer.writerow([ id, date, text ])

if __name__ == "__main__":
    main()