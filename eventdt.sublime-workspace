{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"assertL",
				"assertLess"
			],
			[
				"appl",
				"_apply_reporting_level"
			],
			[
				"asse",
				"assertTrue"
			],
			[
				"bootstr",
				"bootstrapped-new"
			],
			[
				"bootsr",
				"bootstrap"
			],
			[
				"EF",
				"EFIDF"
			],
			[
				"EFID",
				"EFIDFEntropy"
			],
			[
				"WikiAt",
				"WikipediaAttributePostprocessor"
			],
			[
				"Search",
				"WikipediaSearchResolver"
			],
			[
				"Wikipedi",
				"WikipediaSearchResolver"
			],
			[
				"WikipediaAt",
				"WikipediaAttributePostprocessor"
			],
			[
				"Wikie",
				"WikipediaAttributeExtrapolator"
			],
			[
				"is",
				"is_file"
			]
		]
	},
	"buffers":
	[
		{
			"file": "tools/consume.py",
			"settings":
			{
				"buffer_size": 48787,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					96,
					1,
					"insert",
					{
						"characters": " #"
					},
					"AgAAAGd8AAAAAAAAaHwAAAAAAAAAAAAAaHwAAAAAAABpfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZ3wAAAAAAABnfAAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " do"
					},
					"AwAAAGl8AAAAAAAAanwAAAAAAAAAAAAAanwAAAAAAABrfAAAAAAAAAAAAABrfAAAAAAAAGx8AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaXwAAAAAAABpfAAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": " not"
					},
					"BAAAAGx8AAAAAAAAbXwAAAAAAAAAAAAAbXwAAAAAAABufAAAAAAAAAAAAABufAAAAAAAAG98AAAAAAAAAAAAAG98AAAAAAAAcHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbHwAAAAAAABsfAAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " create"
					},
					"BwAAAHB8AAAAAAAAcXwAAAAAAAAAAAAAcXwAAAAAAAByfAAAAAAAAAAAAAByfAAAAAAAAHN8AAAAAAAAAAAAAHN8AAAAAAAAdHwAAAAAAAAAAAAAdHwAAAAAAAB1fAAAAAAAAAAAAAB1fAAAAAAAAHZ8AAAAAAAAAAAAAHZ8AAAAAAAAd3wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcHwAAAAAAABwfAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": " filters"
					},
					"CAAAAHd8AAAAAAAAeHwAAAAAAAAAAAAAeHwAAAAAAAB5fAAAAAAAAAAAAAB5fAAAAAAAAHp8AAAAAAAAAAAAAHp8AAAAAAAAe3wAAAAAAAAAAAAAe3wAAAAAAAB8fAAAAAAAAAAAAAB8fAAAAAAAAH18AAAAAAAAAAAAAH18AAAAAAAAfnwAAAAAAAAAAAAAfnwAAAAAAAB/fAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAd3wAAAAAAAB3fAAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH98AAAAAAAAgHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAf3wAAAAAAAB/fAAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "or"
					},
					"AgAAAIB8AAAAAAAAgXwAAAAAAAAAAAAAgXwAAAAAAACCfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgHwAAAAAAACAfAAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": " splits"
					},
					"BwAAAIJ8AAAAAAAAg3wAAAAAAAAAAAAAg3wAAAAAAACEfAAAAAAAAAAAAACEfAAAAAAAAIV8AAAAAAAAAAAAAIV8AAAAAAAAhnwAAAAAAAAAAAAAhnwAAAAAAACHfAAAAAAAAAAAAACHfAAAAAAAAIh8AAAAAAAAAAAAAIh8AAAAAAAAiXwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgnwAAAAAAACCfAAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAHh8AAAAAAAAeXwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeHwAAAAAAAB4fAAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHl8AAAAAAAAenwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeXwAAAAAAAB5fAAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"left_delete",
					null,
					"AQAAAIB8AAAAAAAAgHwAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAgXwAAAAAAACBfAAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "ed"
					},
					"AgAAAIB8AAAAAAAAgXwAAAAAAAAAAAAAgXwAAAAAAACCfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgHwAAAAAAACAfAAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"left_delete",
					null,
					"AQAAAIt8AAAAAAAAi3wAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAjHwAAAAAAACMfAAAAAAAAP///////+9/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " consumer"
					},
					"CQAAAIt8AAAAAAAAjHwAAAAAAAAAAAAAjHwAAAAAAACNfAAAAAAAAAAAAACNfAAAAAAAAI58AAAAAAAAAAAAAI58AAAAAAAAj3wAAAAAAAAAAAAAj3wAAAAAAACQfAAAAAAAAAAAAACQfAAAAAAAAJF8AAAAAAAAAAAAAJF8AAAAAAAAknwAAAAAAAAAAAAAknwAAAAAAACTfAAAAAAAAAAAAACTfAAAAAAAAJR8AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAi3wAAAAAAACLfAAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAJR8AAAAAAAAlXwAAAAAAAAAAAAAlXwAAAAAAACWfAAAAAAAAAAAAACWfAAAAAAAAJd8AAAAAAAAAAAAAJd8AAAAAAAAmHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlHwAAAAAAACUfAAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAJh8AAAAAAAAmXwAAAAAAAAAAAAAmXwAAAAAAACafAAAAAAAAAAAAACafAAAAAAAAJt8AAAAAAAAAAAAAJt8AAAAAAAAnHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmHwAAAAAAACYfAAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": " understna"
					},
					"CgAAAJx8AAAAAAAAnXwAAAAAAAAAAAAAnXwAAAAAAACefAAAAAAAAAAAAACefAAAAAAAAJ98AAAAAAAAAAAAAJ98AAAAAAAAoHwAAAAAAAAAAAAAoHwAAAAAAAChfAAAAAAAAAAAAAChfAAAAAAAAKJ8AAAAAAAAAAAAAKJ8AAAAAAAAo3wAAAAAAAAAAAAAo3wAAAAAAACkfAAAAAAAAAAAAACkfAAAAAAAAKV8AAAAAAAAAAAAAKV8AAAAAAAApnwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnHwAAAAAAACcfAAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					2,
					"left_delete",
					null,
					"AgAAAKV8AAAAAAAApXwAAAAAAAABAAAAYaR8AAAAAAAApHwAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAApnwAAAAAAACmfAAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "anding"
					},
					"BgAAAKR8AAAAAAAApXwAAAAAAAAAAAAApXwAAAAAAACmfAAAAAAAAAAAAACmfAAAAAAAAKd8AAAAAAAAAAAAAKd8AAAAAAAAqHwAAAAAAAAAAAAAqHwAAAAAAACpfAAAAAAAAAAAAACpfAAAAAAAAKp8AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApHwAAAAAAACkfAAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"left_delete",
					null,
					"AQAAAOZ2AAAAAAAA5nYAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAA53YAAAAAAADndgAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADh8AAAAAAAAOXwAAAAAAAAAAAAAOXwAAAAAAAA9fAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOHwAAAAAAAA4fAAAAAAAAAAAAAAAUHZA"
				],
				[
					139,
					1,
					"left_delete",
					null,
					"AgAAAGx8AAAAAAAAbHwAAAAAAAABAAAAIzl8AAAAAAAAOXwAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAbHwAAAAAAABtfAAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"cut",
					null,
					"AQAAAGh8AAAAAAAAaHwAAAAAAABBAAAAIGRvIG5vdCBjcmVhdGUgYSBmaWx0ZXJlZCBvciBzcGxpdCBjb25zdW1lciBmb3IgdGhlIHVuZGVyc3RhbmRpbmc",
					"AQAAAAAAAAABAAAAaHwAAAAAAACpfAAAAAAAAP///////+9/"
				],
				[
					142,
					1,
					"left_delete",
					null,
					"AQAAAGd8AAAAAAAAZ3wAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAaHwAAAAAAABofAAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line Before.sublime-macro"
					},
					"AgAAADp8AAAAAAAAO3wAAAAAAAAAAAAAOnwAAAAAAAA+fAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZ3wAAAAAAABnfAAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAD58AAAAAAAAQHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPnwAAAAAAAA+fAAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAEB8AAAAAAAAQXwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQHwAAAAAAABAfAAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEF8AAAAAAAAQnwAAAAAAAAAAAAAQnwAAAAAAABGfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQXwAAAAAAABBfAAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAEZ8AAAAAAAASHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARnwAAAAAAABGfAAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAEh8AAAAAAAASXwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASHwAAAAAAABIfAAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line Before.sublime-macro"
					},
					"AQAAAEJ8AAAAAAAAQ3wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASXwAAAAAAABJfAAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"paste",
					null,
					"AQAAAEJ8AAAAAAAAg3wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQnwAAAAAAABCfAAAAAAAAAAAAAAAAAAA"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAEN8AAAAAAAARnwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQ3wAAAAAAABDfAAAAAAAAAAAAAAAABxA"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AgAAAEZ8AAAAAAAAR3wAAAAAAAAAAAAAR3wAAAAAAABHfAAAAAAAAAEAAABk",
					"AQAAAAAAAAABAAAARnwAAAAAAABHfAAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIZ8AAAAAAAAh3wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhnwAAAAAAACGfAAAAAAAAP///////+9/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "\nI"
					},
					"AwAAAId8AAAAAAAAiHwAAAAAAAAAAAAAiHwAAAAAAACMfAAAAAAAAAAAAACMfAAAAAAAAI18AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAh3wAAAAAAACHfAAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAI18AAAAAAAAjnwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjXwAAAAAAACNfAAAAAAAAAAAAAAAgEFA"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": " fact,"
					},
					"BgAAAI58AAAAAAAAj3wAAAAAAAAAAAAAj3wAAAAAAACQfAAAAAAAAAAAAACQfAAAAAAAAJF8AAAAAAAAAAAAAJF8AAAAAAAAknwAAAAAAAAAAAAAknwAAAAAAACTfAAAAAAAAAAAAACTfAAAAAAAAJR8AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjnwAAAAAAACOfAAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAJR8AAAAAAAAlXwAAAAAAAAAAAAAlXwAAAAAAACWfAAAAAAAAAAAAACWfAAAAAAAAJd8AAAAAAAAAAAAAJd8AAAAAAAAmHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlHwAAAAAAACUfAAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " consumer"
					},
					"CQAAAJh8AAAAAAAAmXwAAAAAAAAAAAAAmXwAAAAAAACafAAAAAAAAAAAAACafAAAAAAAAJt8AAAAAAAAAAAAAJt8AAAAAAAAnHwAAAAAAAAAAAAAnHwAAAAAAACdfAAAAAAAAAAAAACdfAAAAAAAAJ58AAAAAAAAAAAAAJ58AAAAAAAAn3wAAAAAAAAAAAAAn3wAAAAAAACgfAAAAAAAAAAAAACgfAAAAAAAAKF8AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmHwAAAAAAACYfAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAKF8AAAAAAAAonwAAAAAAAAAAAAAonwAAAAAAACjfAAAAAAAAAAAAACjfAAAAAAAAKR8AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoXwAAAAAAAChfAAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAKR8AAAAAAAApXwAAAAAAAAAAAAApXwAAAAAAACmfAAAAAAAAAAAAACmfAAAAAAAAKd8AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApHwAAAAAAACkfAAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " spl"
					},
					"BAAAAKd8AAAAAAAAqHwAAAAAAAAAAAAAqHwAAAAAAACpfAAAAAAAAAAAAACpfAAAAAAAAKp8AAAAAAAAAAAAAKp8AAAAAAAAq3wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAp3wAAAAAAACnfAAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					2,
					"left_delete",
					null,
					"AgAAAKp8AAAAAAAAqnwAAAAAAAABAAAAbKl8AAAAAAAAqXwAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAq3wAAAAAAACrfAAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "imple"
					},
					"BQAAAKl8AAAAAAAAqnwAAAAAAAAAAAAAqnwAAAAAAACrfAAAAAAAAAAAAACrfAAAAAAAAKx8AAAAAAAAAAAAAKx8AAAAAAAArXwAAAAAAAAAAAAArXwAAAAAAACufAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqXwAAAAAAACpfAAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAK58AAAAAAAAr3wAAAAAAAAAAAAAr3wAAAAAAACwfAAAAAAAAAAAAACwfAAAAAAAALF8AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArnwAAAAAAACufAAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": " it"
					},
					"AwAAALF8AAAAAAAAsnwAAAAAAAAAAAAAsnwAAAAAAACzfAAAAAAAAAAAAACzfAAAAAAAALR8AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsXwAAAAAAACxfAAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": " can"
					},
					"BAAAALR8AAAAAAAAtXwAAAAAAAAAAAAAtXwAAAAAAAC2fAAAAAAAAAAAAAC2fAAAAAAAALd8AAAAAAAAAAAAALd8AAAAAAAAuHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtHwAAAAAAAC0fAAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": " be."
					},
					"BAAAALh8AAAAAAAAuXwAAAAAAAAAAAAAuXwAAAAAAAC6fAAAAAAAAAAAAAC6fAAAAAAAALt8AAAAAAAAAAAAALt8AAAAAAAAvHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuHwAAAAAAAC4fAAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALt8AAAAAAAAvHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAu3wAAAAAAAC7fAAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": " without"
					},
					"CAAAALx8AAAAAAAAvXwAAAAAAAAAAAAAvXwAAAAAAAC+fAAAAAAAAAAAAAC+fAAAAAAAAL98AAAAAAAAAAAAAL98AAAAAAAAwHwAAAAAAAAAAAAAwHwAAAAAAADBfAAAAAAAAAAAAADBfAAAAAAAAMJ8AAAAAAAAAAAAAMJ8AAAAAAAAw3wAAAAAAAAAAAAAw3wAAAAAAADEfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvHwAAAAAAAC8fAAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": " skipping"
					},
					"CQAAAMR8AAAAAAAAxXwAAAAAAAAAAAAAxXwAAAAAAADGfAAAAAAAAAAAAADGfAAAAAAAAMd8AAAAAAAAAAAAAMd8AAAAAAAAyHwAAAAAAAAAAAAAyHwAAAAAAADJfAAAAAAAAAAAAADJfAAAAAAAAMp8AAAAAAAAAAAAAMp8AAAAAAAAy3wAAAAAAAAAAAAAy3wAAAAAAADMfAAAAAAAAAAAAADMfAAAAAAAAM18AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxHwAAAAAAADEfAAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " any"
					},
					"BAAAAM18AAAAAAAAznwAAAAAAAAAAAAAznwAAAAAAADPfAAAAAAAAAAAAADPfAAAAAAAANB8AAAAAAAAAAAAANB8AAAAAAAA0XwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzXwAAAAAAADNfAAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": " tweets"
					},
					"BwAAANF8AAAAAAAA0nwAAAAAAAAAAAAA0nwAAAAAAADTfAAAAAAAAAAAAADTfAAAAAAAANR8AAAAAAAAAAAAANR8AAAAAAAA1XwAAAAAAAAAAAAA1XwAAAAAAADWfAAAAAAAAAAAAADWfAAAAAAAANd8AAAAAAAAAAAAANd8AAAAAAAA2HwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0XwAAAAAAADRfAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"split",
				"File: Split View"
			],
			[
				"pretti",
				"Pretty JSON: Format JSON Lines"
			],
			[
				"prett",
				"Pretty JSON: Format JSON"
			],
			[
				"package",
				"Package Control: Advanced Install Package"
			],
			[
				"prettif",
				"Pretty JSON: Format JSON Lines"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"remove pa",
				"Package Control: Remove Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"packa",
				"Package Control: Remove Package"
			],
			[
				"pret",
				"Pretty JSON: Format JSON"
			],
			[
				"",
				"Bookmarks: Select All"
			],
			[
				"pretty",
				"Pretty JSON: Format JSON"
			],
			[
				"git:",
				"Git: Gui"
			],
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"1",
				"Go to 1self Dashboard"
			],
			[
				"pack",
				"Package Control: Remove Package"
			],
			[
				"diff",
				"Git: Diff All Files (Ignore Whitespace)"
			],
			[
				"key ",
				"Preferences: Key Bindings"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"scheme",
				"UI: Select Color Scheme"
			],
			[
				"select theme",
				"UI: Select Theme"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"p",
				"Package Control: Install Package"
			],
			[
				"view",
				"View: Toggle Minimap"
			],
			[
				"side",
				"View: Toggle Side Bar"
			],
			[
				"add",
				"Git: Add All"
			],
			[
				"ackage",
				"Package Control: Install Package"
			],
			[
				"package control",
				"Package Control: Install Package"
			],
			[
				"package con",
				"Install Package Control"
			],
			[
				"git",
				"Set Syntax: Git Config"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/nicholas/GitHub/EvenTDT",
		"/home/nicholas/GitHub/EvenTDT/eventdt",
		"/home/nicholas/GitHub/EvenTDT/eventdt/queues",
		"/home/nicholas/GitHub/EvenTDT/eventdt/queues/consumers"
	],
	"file_history":
	[
		"/home/nicholas/GitHub/EvenTDT/eventdt/queues/consumers/algorithms/tests/test_fuego_consumer.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/queues/consumers/algorithms/fuego_consumer.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/twitter/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/queues/consumers/split_consumer.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/queues/consumers/algorithms/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/queues/consumers/token_split_consumer.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/queues/consumers/algorithms/eld_consumer.py",
		"/home/nicholas/GitHub/EvenTDT/tools/consume.py",
		"/home/nicholas/GitHub/EvenTDT/tools/tests/test_consume.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/queues/consumers/algorithms/zhao_consumer.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/queues/consumers/algorithms/tests/test_eld_consumer.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/nlp/document.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tdt/algorithms/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/tools/summarize.py",
		"/home/nicholas/GitHub/EvenTDT/tools/model.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/queues/consumers/algorithms/fire_consumer.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tdt/algorithms/zhao.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/vsm/clustering/cluster.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/vsm/clustering/tests/test_cluster.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/summarization/timeline/nodes/cluster_node.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/summarization/timeline/nodes/topical_cluster_node.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/vsm/clustering/algorithms/tests/test_no_k_means.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/vsm/clustering/algorithms/no_k_means.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/vsm/clustering/algorithms/temporal_no_k_means.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/queues/consumers/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/tools/tests/test_model.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/modeling/modelers/understanding_modeler.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/modeling/modelers/tests/test_understanding_modeler.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/modeling/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/objects/exportable.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/attributes/profile.py",
		"/home/nicholas/GitHub/EvenTDT/tools/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/nlp/tokenizer.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/nlp/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/nlp/tests/test_package.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/nlp/tests/test_tokenizer.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/ate/concepts.json",
		"/home/nicholas/GitHub/EvenTDT/tools/filter_retweets.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/timelines/#ParmaMilan-simplified.json",
		"/home/nicholas/GitHub/EvenTDT/eventdt/summarization/timeline/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/summarization/timeline/nodes/document_node.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/timelines/#ParmaMilan-streams.json",
		"/home/nicholas/GitHub/EvenTDT/eventdt/modeling/modelers/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/timelines/LIVNAP.json",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/timelines/LIVMUN.json",
		"/home/nicholas/GitHub/EvenTDT/tools/participants.py",
		"/home/nicholas/GitHub/EvenTDT/tools/tests/test_participants.py",
		"/home/nicholas/GitHub/EvenTDT/tools/concepts.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/eld_participant_detector.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/participants.json",
		"/home/nicholas/GitHub/EvenTDT/tools/bootstrap.py",
		"/home/nicholas/GitHub/EvenTDT/tools/terms.py",
		"/home/nicholas/GitHub/EvenTDT/tools/evaluation/terms.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/ate/stat/corpus/tests/test_rank.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/ate/stat/corpus/rank.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/attributes/extractors/linguistic.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/tokenized/sample-2.json",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/tokenized/sample-1.json",
		"/home/nicholas/GitHub/EvenTDT/README.md",
		"/home/nicholas/GitHub/EvenTDT/tools/collect.py",
		"/home/nicholas/GitHub/EvenTDT/tools/shareable.py",
		"/home/nicholas/GitHub/EvenTDT/temp/meta.json",
		"/home/nicholas/GitHub/EvenTDT/tests.sh",
		"/home/nicholas/GitHub/EvenTDT/docsource/tools.rst",
		"/home/nicholas/GitHub/EvenTDT/tools/evaluation/tests/test_terms.py",
		"/home/nicholas/GitHub/EvenTDT/tools/correlation.py",
		"/home/nicholas/GitHub/EvenTDT/tools/evaluation/ate.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/ate/correlations.json",
		"/home/nicholas/GitHub/EvenTDT/tools/tests/test_summarize.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/ate/application/tests/test_event.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/ate/application/event.py",
		"/home/nicholas/GitHub/EvenTDT/tools/idf.py",
		"/home/nicholas/GitHub/EvenTDT/tools/tests/test_idf.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/idf.json",
		"/home/nicholas/GitHub/EvenTDT/tools/tests/test_concepts.py",
		"/home/nicholas/GitHub/EvenTDT/tools/tests/test_bootstrap.py",
		"/home/nicholas/GitHub/EvenTDT/tools/tests/test_correlation.py",
		"/home/nicholas/GitHub/EvenTDT/tools/tests/test_terms.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/ate/gold.txt",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/ate/empty.txt",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/bootstrapping/bootstrapped.json",
		"/home/nicholas/GitHub/EvenTDT/tools/tests/test_package.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/tests/corpora/ate/sample.json",
		"/home/nicholas/GitHub/EvenTDT/temp/sample.json",
		"/home/nicholas/GitHub/EvenTDT/tools/to_tsv.py",
		"/home/nicholas/GitHub/Embed2Detect/embed2detect/main.py",
		"/home/nicholas/GitHub/Embed2Detect/embed2detect/event_word_extractor.py",
		"/home/nicholas/GitHub/Embed2Detect/project_config.py",
		"/home/nicholas/GitHub/EvenTDT/docsource/ate.rst",
		"/home/nicholas/GitHub/EvenTDT/docsource/apd.rst",
		"/home/nicholas/GitHub/EvenTDT/eventdt/ate/application/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/temp/event.json",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/tests/test_eld_participant_detector.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/depict_participant_detector.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/tests/test_depict_participant_detector.py",
		"/home/nicholas/DATA/c3-apd/#CanadianGP-2022/temp.json",
		"/home/nicholas/DATA/c3-apd/#CanadianGP-2022/participants-annotations-extrapolated.json",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/extrapolators/external/wikipedia_attribute_extrapolator.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/resolvers/external/wikipedia_search_resolver.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/filters/local/rank_filter.py",
		"/home/nicholas/GitHub/EvenTDT/tools/tokenizer.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/extractors/local/entity_extractor.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/extractors/local/annotation_extractor.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/extractors/local/twitterner_entity_extractor.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/ate/extractor.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/extractors/local/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/extrapolators/external/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/extrapolators/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/resolvers/resolver.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/postprocessors/postprocessor.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/attributes/extractors/tests/test_linguistic.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/ner_participant_detector.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/apd/participant_detector.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/logger/logger.py",
		"/home/nicholas/DATA/c3-apd/#BritishGP-2022/participants-annotations-extrapolated-baseline.json",
		"/home/nicholas/DATA/c3-apd/#BritishGP-2022/participants-twitterner-extrapolated.json",
		"/home/nicholas/DATA/c3-apd/#BritishGP-2022/participants-twitterner-extrapolated-baseline.json",
		"/home/nicholas/DATA/c3-apd/#BritishGP-2022/participants-ner-extrapolated.json",
		"/home/nicholas/DATA/c3-apd/#BritishGP-2022/participants-ner-extrapolated-baseline.json",
		"/home/nicholas/DATA/c3-apd/#BritishGP-2022/participants-annotations-extrapolated.json",
		"/home/nicholas/GitHub/EvenTDT/tools/tests/test_shareable.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/queues/__init__.py",
		"/home/nicholas/GitHub/EvenTDT/venv/lib/python3.8/site-packages/urllib3/util/queue.py",
		"/run/user/1000/gvfs/sftp:host=vps-storage,user=memonick/data/phd-data/fuego-sampled/meta/#HUNFRA-v3-b0.8-r0.08-grouped.csv.meta",
		"/home/nicholas/GitHub/EvenTDT/eventdt/twitter/file/simulated_reader.py",
		"/home/nicholas/GitHub/EvenTDT/eventdt/twitter/listeners/tweet_listener.py",
		"/home/nicholas/GitHub/EvenTDT/.gitignore"
	],
	"find":
	{
		"height": 44.0
	},
	"find_in_files":
	{
		"height": 122.0,
		"where_history":
		[
			"",
			"tools/*.py",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"twitter.is_retweet(document.tweet)",
			"recency",
			"original",
			"ORIGINAL",
			"original",
			"twitter",
			"document.tweet",
			"cmd",
			"cmd[",
			"pcmd",
			"self.assertEqual(ReportingLevel.ORIGINAL, consumer.consumer.reporting)",
			"reporting=ReportingLevel.ORIGINAL)",
			"self.assertTrue(all( ReportingLevel.ORIGINAL == _consumer.reporting for _consumer in consumer.consumers ))",
			"reporting=ReportingLevel.ORIGINAL)",
			"ReportingLevel",
			"self.assertEqual(ReportingLevel.ORIGINAL, consumer.reporting)",
			"ALL",
			"reporting",
			"ORIGINAL",
			"ALL",
			"reporting",
			"FilteringLevel.LENIENT)",
			"threshold_type=DynamicThreshold.MEAN_STDEV, filtering=FilteringLevel.LENIENT)",
			"LENIENT",
			"self.assertEqual(FilteringLevel.LENIENT, consumer.filtering)",
			"freeze_period=10, log_nutrition=True, filtering=FilteringLevel.LENIENT)",
			"FilteringLevel",
			"self.assertTrue(all( FilteringLevel.LENIENT == _consumer.filtering for _consumer in consumer.consumers ))",
			"log_nutrition=True, threshold_type=DynamicThreshold.MEAN_STDEV, filtering=FilteringLevel.LENIENT)",
			"self.assertEqual(FilteringLevel.LENIENT, consumer.consumer.filtering)",
			"filtering",
			"STRICT",
			"filtering",
			"LENIENT",
			"NONE",
			"filtering",
			"threshold",
			"MEAN_STDEV",
			"DynamicThreshold",
			"threshold",
			"MEAN_STDEV",
			"DynamicThreshold",
			"\n        ",
			"FilteringLevel",
			"threshold",
			"MEAN_STDEV",
			"DynamicThreshold",
			"threshold_type",
			"reporting",
			"Reporting",
			"f",
			"filtering",
			"threshold",
			"Threshold",
			"f",
			"verbose",
			"filtering",
			"filterin",
			"float",
			"ELDConsumer",
			"ReportingLevel",
			"ORIGINAL",
			"ALL",
			", ",
			"ORIGINAL",
			"ReportingLevel",
			"reporting",
			"FilteringLevel",
			"LENIENT",
			"FilteringLevel",
			"NONE",
			"FilteringLevel",
			"filtering",
			"DynamicThreshold",
			"threshold_type",
			"filtering_level",
			"level",
			"MEAN_STDEV",
			"MOVING_MEAN",
			"MEAN",
			"Filtering",
			"FilteringLevel",
			"DynamicThreshold",
			"algorithms.fuego_consumer.DynamicThreshold",
			"MEAN_STDEV",
			"MOVING_MEAN",
			"`, ",
			"MEAN",
			"threshold",
			"threshold_type",
			"filtering_level",
			"threshold_type",
			"name",
			"FUEGOConsumer",
			"tweet = json.loads(f.readline())\n            document = consumer._to_documents([ tweet ])[0]",
			"from a tweet",
			"dimensions",
			"self.assertTrue(all( tweet == document.tweet for tweet, document in zip(tweets, documents) ))",
			"TWEET",
			"`TWEET`",
			"TWEET",
			"tweet",
			"Test that when creating a document from a tweet",
			"id_str",
			"self.assertEqual(tweet, document.tweet)",
			"tweet = json.loads(f.readline())\n            document = consumer._to_documents([ tweet ])[0]",
			"ORIGINAL",
			"ALL",
			"ReportingLevel",
			"reporting",
			"StorageLevel",
			"ORIGINAL",
			"ALL",
			"ReportingLevel",
			"reporting",
			"Reporting",
			"reporting",
			"ivar",
			"ReportingLevel",
			"all",
			"reporting",
			"StorageLevel",
			"ORIGINAL",
			"ALL",
			"ORIGINAL",
			"ALL",
			"retweet",
			"CRYCHE"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"\\t&\\t",
			" \\\\\\\\\\n",
			"\\t&\\t",
			" \\\\\\\\\\n",
			"\\t&\\t",
			" \\\\\\\\\\n",
			"\\t&\\t",
			" \\\\\\\\\\n",
			"\\\\\\\\\\n",
			"\\t&\\t",
			"is_own",
			"\\t&\\t",
			" \\\\\\\\ \\n",
			"\\\\ \\n",
			" & ",
			"SEER",
			"EVATE",
			"    ",
			"\\t&\\t",
			"\\t\\\\\\\\\\n",
			"\\\\\\n",
			"\\t&\\t",
			"\\t",
			"\\\\t",
			"\\\\%",
			"\\%",
			"\\n",
			"\\%"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "tools/consume.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 48787,
						"regions":
						{
						},
						"selection":
						[
							[
								31960,
								31960
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8012.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 275.0
	},
	"pinned_build_system": "",
	"project": "eventdt.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"twitterinit",
				"eventdt/twitter/__init__.py"
			],
			[
				"testfuego",
				"eventdt/queues/consumers/algorithms/tests/test_fuego_consumer.py"
			],
			[
				"consume",
				"tools/consume.py"
			],
			[
				"split",
				"eventdt/queues/consumers/split_consumer.py"
			],
			[
				"tokensplit",
				"eventdt/queues/consumers/token_split_consumer.py"
			],
			[
				"fuegocons",
				"eventdt/queues/consumers/algorithms/fuego_consumer.py"
			],
			[
				"eldcons",
				"eventdt/queues/consumers/algorithms/eld_consumer.py"
			],
			[
				"testconsume",
				"tools/tests/test_consume.py"
			],
			[
				"zhacons",
				"eventdt/queues/consumers/algorithms/zhao_consumer.py"
			],
			[
				"fuegocon",
				"eventdt/queues/consumers/algorithms/fuego_consumer.py"
			],
			[
				"eldconsumer",
				"eventdt/queues/consumers/algorithms/eld_consumer.py"
			],
			[
				"algorinit",
				"eventdt/queues/consumers/algorithms/__init__.py"
			],
			[
				"docume",
				"eventdt/nlp/document.py"
			],
			[
				"testeld",
				"eventdt/queues/consumers/algorithms/tests/test_eld_consumer.py"
			],
			[
				"fuego",
				"eventdt/queues/consumers/algorithms/fuego_consumer.py"
			],
			[
				"eldcon",
				"eventdt/queues/consumers/algorithms/eld_consumer.py"
			],
			[
				"algorithmsini",
				"eventdt/queues/consumers/algorithms/__init__.py"
			],
			[
				"algorithmsi",
				"eventdt/tdt/algorithms/__init__.py"
			],
			[
				"testeldcons",
				"eventdt/queues/consumers/algorithms/tests/test_eld_consumer.py"
			],
			[
				"model.",
				"tools/model.py"
			],
			[
				"summar",
				"tools/summarize.py"
			],
			[
				"firecon",
				"eventdt/queues/consumers/algorithms/fire_consumer.py"
			],
			[
				"zhao",
				"eventdt/tdt/algorithms/zhao.py"
			],
			[
				"testcluster",
				"eventdt/vsm/clustering/tests/test_cluster.py"
			],
			[
				"cluster",
				"eventdt/vsm/clustering/cluster.py"
			],
			[
				"clusterno",
				"eventdt/summarization/timeline/nodes/cluster_node.py"
			],
			[
				"clusternode",
				"eventdt/summarization/timeline/nodes/topical_cluster_node.py"
			],
			[
				"testnok",
				"eventdt/vsm/clustering/algorithms/tests/test_no_k_means.py"
			],
			[
				"tempor",
				"eventdt/vsm/clustering/algorithms/temporal_no_k_means.py"
			],
			[
				"nok",
				"eventdt/vsm/clustering/algorithms/no_k_means.py"
			],
			[
				"nokme",
				"eventdt/vsm/clustering/algorithms/no_k_means.py"
			],
			[
				"tempora",
				"eventdt/vsm/clustering/algorithms/temporal_no_k_means.py"
			],
			[
				"testeldcon",
				"eventdt/queues/consumers/algorithms/tests/test_eld_consumer.py"
			],
			[
				"testmodel",
				"tools/tests/test_model.py"
			],
			[
				"model",
				"tools/model.py"
			],
			[
				"testund",
				"eventdt/modeling/modelers/tests/test_understanding_modeler.py"
			],
			[
				"under",
				"eventdt/modeling/modelers/understanding_modeler.py"
			],
			[
				"consu",
				"tools/consume.py"
			],
			[
				"consume.",
				"tools/consume.py"
			],
			[
				"modelingini",
				"eventdt/modeling/__init__.py"
			],
			[
				"profile",
				"eventdt/attributes/profile.py"
			],
			[
				"exportab",
				"eventdt/objects/exportable.py"
			],
			[
				"toolsinit",
				"tools/__init__.py"
			],
			[
				"model.p",
				"tools/model.py"
			],
			[
				"testunde",
				"eventdt/modeling/modelers/tests/test_understanding_modeler.py"
			],
			[
				"underst",
				"eventdt/modeling/modelers/understanding_modeler.py"
			],
			[
				"testpackage nlp",
				"eventdt/nlp/tests/test_package.py"
			],
			[
				"testokn",
				"eventdt/nlp/tests/test_tokenizer.py"
			],
			[
				"nlpini",
				"eventdt/nlp/__init__.py"
			],
			[
				"tokeniz",
				"eventdt/nlp/tokenizer.py"
			],
			[
				"concepts",
				"eventdt/tests/corpora/ate/concepts.json"
			],
			[
				"filter",
				"tools/filter_retweets.py"
			],
			[
				"simplif",
				"eventdt/tests/corpora/timelines/#ParmaMilan-simplified.json"
			],
			[
				"timeline",
				"eventdt/summarization/timeline/__init__.py"
			],
			[
				"summariz",
				"tools/summarize.py"
			],
			[
				"parmami",
				"eventdt/tests/corpora/timelines/#ParmaMilan-streams.json"
			],
			[
				"documentno",
				"eventdt/summarization/timeline/nodes/document_node.py"
			],
			[
				"node",
				"eventdt/summarization/timeline/nodes/cluster_node.py"
			],
			[
				"parmamilan",
				"eventdt/tests/corpora/timelines/#ParmaMilan-streams.json"
			],
			[
				"modelini",
				"eventdt/modeling/modelers/__init__.py"
			],
			[
				"und",
				"eventdt/modeling/modelers/understanding_modeler.py"
			],
			[
				"timelines/",
				"eventdt/tests/corpora/timelines/LIVNAP.json"
			],
			[
				"timeln.json",
				"eventdt/tests/corpora/timelines/LIVMUN.json"
			],
			[
				"mod",
				"eventdt/modeling/modelers/understanding_modeler.py"
			],
			[
				"partic",
				"tools/participants.py"
			],
			[
				"unde",
				"eventdt/modeling/modelers/understanding_modeler.py"
			],
			[
				"testpa",
				"tools/tests/test_participants.py"
			],
			[
				"particip",
				"eventdt/apd/eld_participant_detector.py"
			],
			[
				"nlp/",
				"eventdt/nlp/tokenizer.py"
			],
			[
				"unders",
				"eventdt/modeling/modelers/understanding_modeler.py"
			],
			[
				"understand",
				"eventdt/modeling/modelers/understanding_modeler.py"
			],
			[
				"export",
				"eventdt/objects/exportable.py"
			],
			[
				"participants.js",
				"eventdt/tests/corpora/participants.json"
			],
			[
				"testparti",
				"tools/tests/test_participants.py"
			],
			[
				"partici",
				"tools/participants.py"
			],
			[
				"understa",
				"eventdt/modeling/modelers/understanding_modeler.py"
			],
			[
				"modelersinit",
				"eventdt/modeling/modelers/__init__.py"
			],
			[
				"consum",
				"tools/consume.py"
			],
			[
				"model.py",
				"tools/model.py"
			],
			[
				"terms.",
				"tools/terms.py"
			],
			[
				"bootstra",
				"tools/bootstrap.py"
			],
			[
				"terms.py",
				"tools/evaluation/terms.py"
			],
			[
				"sample-2",
				"eventdt/tests/corpora/tokenized/sample-2.json"
			],
			[
				"sampl-1",
				"eventdt/tests/corpora/tokenized/sample-1.json"
			],
			[
				"sample-1",
				"eventdt/tests/corpora/tokenized/sample-1.json"
			],
			[
				"testrank",
				"eventdt/ate/stat/corpus/tests/test_rank.py"
			],
			[
				"rank",
				"eventdt/ate/stat/corpus/rank.py"
			],
			[
				"linguist",
				"eventdt/attributes/extractors/linguistic.py"
			],
			[
				"modelinit",
				"eventdt/modeling/modelers/__init__.py"
			],
			[
				"modeler",
				"eventdt/modeling/modelers/understanding_modeler.py"
			],
			[
				"consumersinit",
				"eventdt/queues/consumers/__init__.py"
			],
			[
				"collect",
				"tools/collect.py"
			],
			[
				"readme",
				"README.md"
			],
			[
				"collec",
				"tools/collect.py"
			],
			[
				"understandingmodel",
				"eventdt/modeling/modelers/understanding_modeler.py"
			],
			[
				"modeling",
				"eventdt/modeling/__init__.py"
			],
			[
				"tests.sh",
				"tests.sh"
			],
			[
				"toolsrst",
				"docsource/tools.rst"
			],
			[
				"correlat",
				"tools/correlation.py"
			],
			[
				"corerlations",
				"eventdt/tests/corpora/ate/correlations.json"
			],
			[
				"ate.py",
				"tools/evaluation/ate.py"
			],
			[
				"testsummar",
				"tools/tests/test_summarize.py"
			],
			[
				"summarize.",
				"tools/summarize.py"
			],
			[
				"testevent",
				"eventdt/ate/application/tests/test_event.py"
			],
			[
				"testidf",
				"tools/tests/test_idf.py"
			],
			[
				"idf",
				"tools/idf.py"
			],
			[
				"timelineinit",
				"eventdt/summarization/timeline/__init__.py"
			],
			[
				"idj",
				"eventdt/tests/corpora/idf.json"
			],
			[
				"testconsue",
				"tools/tests/test_consume.py"
			],
			[
				"testconce",
				"tools/tests/test_concepts.py"
			],
			[
				"bootstr",
				"tools/bootstrap.py"
			],
			[
				"testconcep",
				"tools/tests/test_concepts.py"
			],
			[
				"testboots",
				"tools/tests/test_bootstrap.py"
			],
			[
				"correlation",
				"tools/correlation.py"
			],
			[
				"ate/.txt",
				"eventdt/tests/corpora/ate/gold.txt"
			],
			[
				"ate/txt",
				"eventdt/tests/corpora/ate/empty.txt"
			],
			[
				"testterms",
				"tools/tests/test_terms.py"
			],
			[
				"terms",
				"tools/terms.py"
			],
			[
				"testboot",
				"tools/tests/test_bootstrap.py"
			],
			[
				"testpartici",
				"tools/tests/test_participants.py"
			],
			[
				"participant",
				"tools/participants.py"
			],
			[
				"corre",
				"tools/correlation.py"
			],
			[
				"testcorrela",
				"tools/tests/test_correlation.py"
			],
			[
				"concep",
				"tools/concepts.py"
			],
			[
				"testcorre",
				"tools/tests/test_correlation.py"
			],
			[
				"correla",
				"tools/correlation.py"
			],
			[
				"bootstrapped",
				"eventdt/tests/corpora/bootstrapping/bootstrapped.json"
			],
			[
				"testbootstr",
				"tools/tests/test_bootstrap.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/GitHub/EvenTDT/eventdt.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 263.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
